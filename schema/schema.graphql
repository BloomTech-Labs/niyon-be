#resolver types for Query and Mutation
type Query {
    me: User!
    tech: [Tech]!
    location: [Location]!
    job_title: [Job_Title]!
    profileStart: Profile_Package!
}

type Mutation {
    auth: User!
    register(input: addUser!): AuthUser!
    login(input: authUser!): AuthUser!
}

#enum type to only allow the use of two user types
enum UserType {
    MENTOR
    MENTEE
}

#main types
type Job_Title {
    id: ID!
    job_title: String! #replace with enum after slack thread fills
}

type Tech {
    id: ID!
    name: String! #replace with enum after slack thread fills
    type: String!
}

type Location {
    id: ID!
    city: String!
    country: String!
}

type User {
    id: ID!
    first_name: String
    last_name: String
    email: String!
    password: String!
    job_title: Job_Title
    user_type: UserType!
    tech_stack: [Tech]
    location: Location
}

#type for login requiring a token and an actual user
type AuthUser {
    token: String!
    user: User!
}

#types used for querying data
type Profile_Package {
    location: [Location]!
    job_title: [Job_Title]!
    tech_stack: [Tech]!
}

#input types to define what the client needs to send up
input addUser {
    email: String!
    password: String!
    user_type: UserType!
}

input authUser {
    email: String!
    password: String!
}

